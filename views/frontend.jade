extends layout

block content
  
  .constrained

    .breadcrum
      .title The Frontend Basics
      .sub-title A robust app building engine

    aside

    article
      h2 Overview
      p The Frontend is the most magical and important piece of the Platform; here is where all the users will hang out and do all that wonderful stuff with your platform. It's a professional frontend in that sense that it uses the best practices for modern application development and deployment.
    
      h5 Appbot is amazing, it provides a professional workflow based on the Grunt Toolset of automated Tasks. 
      
      p With Appbot our development enviroment works for us, changes on code are compiled from Coffeescript, Less and Jade and compiled automatically. A complete and simple Unit/Functional and Integration Testing suite is integrated on the development process.
      
      p Best practices for Javascript and CSS Modular Development are baked into the development enviroment, so that it's not only easy to employ good programming technichs, but also that's cleatly better.
      
      h3 Javascript
      p Actually the frontend is build with Coffeescript ( optional ) packed in CommonJS Modules (non-optional) and structured using the SpineJS Framework. This are hard decisions, we hope you trust us to show you why we believe this are good decisions that will make your development experience better.
      
      p With our Grunt Automated Build System called Grunt-Appbot-Compiler we create several apps that share a common code base. In case you want to create an app for web and a similar one for Mobile/Tablet. We can load Modules on Demand when they are required, rather than loading huge JS files at startup and making the user wait.
      
      p Creating a Javascript Package is simple, look at the ./GruntFile.coffee task for Grunt-Appbot-Compiler to see how it's done. It basically compiles and packs all files on a directory and it's subdirectories, concatenates it and publish it on the public folder ready to be used. This way we have complete flexibility on how we structure , build and load our apps.
      
      h3 CSS
      p Actually the CSS is written with Less (optional) and it follows the best practices of CSS Design and Development, focusing on performance and maintance. We are sure you'll feel the benefits of the structure once you work with it.
      
      p We based our structure on the SMCASS Theory https://smacss.com/ , mixing a little of Object Oriented CSS from Nichole Sullivan CSS genius. It's important that we all are very familiar with it's concepts and understand why it's important to follow this best practices.
      
      h3 Components
      p Actually the system is Component Based, there is no real use for isolated Javascript or CSS since every bit of code should be encapsulated on a Module. This methodology makes applications stable, maintainable and rock solid.
      
      p It's really comfortable to be able to work on the behavior, template and style of an application's component on the same folder. Being able to Unit Test Client Side Code and not worry about how that's compiled and sent to the browser.
      
      p Components are isolated and reusable, they are amazing and the way we have set them up on Appbot is great. Check out how components work on the folder app/components. 
      
      p Components must have a file called appbotComponent.json that sets the namespace of the component and other compile time options. Apps for a Private App Store behave just like components. Remember that components can be loaded on demand at anytime, not just during the initial load of the application.
      
      h3 Jade & Scout File
      p It's important to read this: http://alexsexton.com/blog/2013/03/deploying-javascript-applications/ it explains what we are doing here.
      
      p Basically we compile every asset so that it does not require a Frontend Server and can be served from a CDN, we compile CSS, Javascript and Jade, we compile everything so that it can be cached.
      
      p Files on development end up on the public folder, on production they are deployed to S3 and hooked to a CloudFront CDN. Each time a build is created, a new bucket with the build number is created. Files inside this bucket are cached for 30 years.
      
      p HTML files are cached for 5 minutes, and they are automatically compiled to include the latest build number on the path of each asset it references. Check out ./public/index.html to see how it works on development. On Production all links contain the path of the build number. 
      
      p When the system is updated, html files are updated with the new build number and all files are uploades to the corresponding bucket in S3.
      
      p In this case we are using HTML files injected with a JS script that acts as a Scout File. This file could send the screen size and other browser features and specific content could be send for this specific device. Also on other "more dynamic" situations the scout file could be a individual .js file also cached for 5 minutes.
      
      h4 It's important to understand that all this process occur automatically and is based on Grunt Tasks.
      
      
      h2 First Steps
      p This is a complex system, we try to simplify it and make it super easy to get started. Follow this steps with enought time and and open mind for new concepts and unexpected problems. The system is based on Grunt, Coffeescript, Less and SpineJS Framework. All of them super documented, be sure to study them to make sure you understand what's going on.
      
      h3 Setup

      p In order to setup the environment, developers should have the following dependencies pre-installed.

      ul
        li Ruby 1.9.3++ ( on Mac requires XCode or XCode CLT )
        li NodeJS 0.8.0++ and NPM
        li Text Editor
        li Chrome Web Browser
        li Grunt

      h4 Developers should also have accounts with the following services
      ul
        li Amazon Web Services
        li Github

      h3 Getting the Code
      p Once you are done, you must pull the master repository of the Appbot Platform your team is working one.
      code git pull []
    
      p Install all necessary dependencies with npm from within the source code root folder.
      code $ npm install .
      p May require to use sudo 
    
      p Start the server and check http://localhost:3000
      code $ grunt server
    
    
      h3 About Testing
      p Test are the most important part of the system
      
      h3 Writing Components
      
      h2 MVC Framework
      p In order to work on a profesional enterprise application, developers should be highly experiences on MVC Frontend Frameworks, if not proces with much care understanding that at least three months of lossness and frustrations while learning lie ahead. Make sure you have enought time to study , read , watch screencast and practice on your own apps outside of Appbot since it's too complex for a junior developer to get started on.
      
      p The MVC Framework used is SpineJS, althou other frameworks can be used like BackboneJS and AngularJS as long as they are packed as CommonJS Modules. The compiler shipped with appbot is a firm believer of CommonJS. 
      
      p Instructions on how to write apps with SpineJS can be obtained on the SpineJS website and reading the book Developing Javascript Applications written by Alex Maccaw
      
      h3 Proprietary Framework
      p Actually we are not using the standard SPineJS build, we rather fork it and maintain a version created for enterprise applications in mind. 
      
      
      h2 Deploying
      p When deploying to the master repository , and since we are using a CI system, you'll be upgrading automatically the testing server if all test pass on the CI System.
      
      p In order to deploy your code commit it to git, once you are ready to commit to master
      code $grunt deploy
      p Will build the production version and deploy the code to the server. If all tests pass, the contents of the ./public folder will be uploaded to S3 and all HTML files will be updated to the use the new build number bucket. This will take 5 minutes to take effect due to cache.
      
      
      
       
    
    
    
   