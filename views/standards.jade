extends layout

block content
  
  .constrained

    .breadcrum
      .title The Frontend Basics
      .sub-title A robust app building engine

    aside

    article
      h3 Collaborative Development
      p The hardest and most important feature of a system is that several people can work on it at the same time. We use Git and Github to host our code repository, it's important that all developers are super familiar with both.

      p When a developer is working on it's station, he should follow Test Driven Development Methodology and make sure all test pass before committing to the Master Repository. 

      p After the Master Repository is update a Continuous Integration Service is invoked to execute all Unit and Integration Test, if they pass a Test Build is created and pushed to the Testing Servers.

      p This ensures that the system is integrated at all times and all test on the Master Repository are successful.

      h3 Test Driven Development
      p Testing is important for two reasons, in order to develop an enterprise application developers should know this reasons from experience. If this is not the case, junior developers should make a big effort to learn and apply this techniques by the book since they seem tedious and non-sense with out the experience of the opposite irresponsable style.

      p Normally when an App is starting and it's small, being developed at full speed; testing is really not necessary. As with most of the smart actions that we take, we test for the future. 

      p After an App or Feature is build, we normally don't got back to it for a while, until a change is required. A developer in the future is going to do that change, he won't know or remember the caveats of the system. He'll do the change, check that it works and publish the change to the live server.

      p Unfortunately, when he made that change another unrelated part of the app broke; but nobody notices since nobody remembered that another component shared code with the one that was changed. So the App broke, and nobody notices or understands what happend. That's really bad.

      h5 Software Development is for smart people that understand the need and apply Test Driven Development
  
      p Like everything that's healthy and smart to do, testing is a pain and is hard to follow; sometimes even harder to actually figure how yo do it. Test Driven Development is a method that simplifies this.
    
      p TDD in simple words means to first write a test for the code you are about to write. Have the Test Fail, then write the code to make the test pass. No code is permitted to be written that's not going to make a test pass. This way we make sure to write good tests and that code coverage is maintained. Creating good quality software vrs crappy software.
    
      p Not everything need to be tested, it's also really hard to figure that to test and what not if you mind is not fresh and open. Remember test when something can break, and when in doubt is probably right to write a test.
    
      h3 Automated Building
      p It's now clear why it's necessary to have an Continous Build Process and that's good. However getting it to work and be a good team member is hard. CI Systems should get out of the way, be automatic and send notifications of errors on time. It's should also work as or along an Automated Build System.
    
      p Since Appbot works 100% on Javascript Automated Building can be part of the Continous Integration Process. After all test pass, the CI System can go ahead and build the application, even deploy it to a staging or testing server.
    
      p After the Build is complete, a manual but simple to use process should be executed to deploy updates from testing server to staging and finally production servers. It should also be really simple to switch between builds in case a mistake is made, that it's simple and quick to go back to the last build.
    
    
    
    
    
    
    
