extends layout

block content
  
  .container
    .row
      h1 The Frontend Basics
      h3 A robust app building engine
  
    .row.fullHeight
      .col-12.col-lg-3.sideBar.fullHeight
        h2 Sidebar
        ul
          li 
            a Overview
            ul
              li 
                a Front End Server
              li 
                a Grunt
              li 
                a Build
                
              li
                a Deployment
          li 
            a First Steps
            ul
              li 
                a Initial Setup
              li 
                a Build an App
              li 
                a Configuration
              li 
                a Deployment

      .col-8.mainContent
        h2 Decisions
        p It's important to be clear that many decisions have been made after careful consideration of architecture and integration, this is part of a large enterprise system, this is not an isolated single page application; Althou it can be :)
        
        p It's understandable that known tools and frameworks would be prefered over the ones selected here, and this topics generate a large discussion.
        
        h4 Any framework, idea or standard can be used; This is an open platform. 
        p The entire framework can be dropped, since it the end all that matters are the Https REST and "custom" REST Requests made towards the API Server.
        
        h4 Follow our documentation to get an understanding of the concepts before forking towards other solutions.
        
        h2 CommonJS
        p Modular Apps are the solution to building large javascript apps, they also avoid polluting the global namespace and easily require external files into the program.
        
        p We use the CommonJS convention to build modular applications, there are other implementations like AMD. The build process and Grunt Tasks are setup for CommonJS, experienced teams may very well use Grunt Alternative Tasks for it's build process and App Structure.
        
        p By using CommonJS Modules we may structure applications into separate "containers" while sharing certain parts. For example the MVC's Models can be shared between a Web and Mobile App.
        
        p This approach is important so that we can structure our app in components. Each component is an encapsulation of a feature and does not need to be aware of other parts of the app. Components can also be loaded on demand after the app has launched.
        
        h4 In order to learn more about CommonJS study the code on any file on the "app folder". Basically it permits to require external files, each file "exports" a public interface using:

        code module.exports = function Car(){}
        p in a file named car.js on the models folder (/models/car)
        
        code var Car = require("models/car")
        p A simple example
        
        h2 Coffeescript
        p Most of the code is written in Coffeescript, this is another decision that can be changes with ease. Simply write files in javascript and you are good to go. Coffescript Files are compiled automatically before being concatenated ( CommonJS style  ) in a javascript file.
        
        p Using Coffeescript is a controversial decision, on the enterprise realm is very helpful due to the large scale of the code and the fact the Coffeescript simplifies object oriented programming.
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        